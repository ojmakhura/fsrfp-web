{
  "version": 3,
  "sources": ["../../../../../../node_modules/keycloak-angular/fesm2022/keycloak-angular.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, NgModule, signal, InjectionToken, inject, effect, Directive, Input, computed, PLATFORM_ID, provideAppInitializer, EnvironmentInjector, runInInjectionContext, makeEnvironmentProviders } from '@angular/core';\nimport { HttpHeaders, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Subject, from, combineLatest, of, fromEvent, mergeMap as mergeMap$1 } from 'rxjs';\nimport { map, mergeMap, debounceTime, takeUntil } from 'rxjs/operators';\nimport Keycloak from 'keycloak-js';\nimport { CommonModule, isPlatformBrowser } from '@angular/common';\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * Keycloak event types, as described at the keycloak-js documentation:\n * https://www.keycloak.org/docs/latest/securing_apps/index.html#callback-events\n *\n * @deprecated Keycloak Event based on the KeycloakService is deprecated and\n * will be removed in future versions.\n * Use the new `KEYCLOAK_EVENT_SIGNAL` injection token to listen for the keycloak\n * events.\n * More info: https://github.com/mauriciovigolo/keycloak-angular/docs/migration-guides/v19.md\n */\nvar KeycloakEventTypeLegacy;\n(function (KeycloakEventTypeLegacy) {\n  /**\n   * Called if there was an error during authentication.\n   */\n  KeycloakEventTypeLegacy[KeycloakEventTypeLegacy[\"OnAuthError\"] = 0] = \"OnAuthError\";\n  /**\n   * Called if the user is logged out\n   * (will only be called if the session status iframe is enabled, or in Cordova mode).\n   */\n  KeycloakEventTypeLegacy[KeycloakEventTypeLegacy[\"OnAuthLogout\"] = 1] = \"OnAuthLogout\";\n  /**\n   * Called if there was an error while trying to refresh the token.\n   */\n  KeycloakEventTypeLegacy[KeycloakEventTypeLegacy[\"OnAuthRefreshError\"] = 2] = \"OnAuthRefreshError\";\n  /**\n   * Called when the token is refreshed.\n   */\n  KeycloakEventTypeLegacy[KeycloakEventTypeLegacy[\"OnAuthRefreshSuccess\"] = 3] = \"OnAuthRefreshSuccess\";\n  /**\n   * Called when a user is successfully authenticated.\n   */\n  KeycloakEventTypeLegacy[KeycloakEventTypeLegacy[\"OnAuthSuccess\"] = 4] = \"OnAuthSuccess\";\n  /**\n   * Called when the adapter is initialized.\n   */\n  KeycloakEventTypeLegacy[KeycloakEventTypeLegacy[\"OnReady\"] = 5] = \"OnReady\";\n  /**\n   * Called when the access token is expired. If a refresh token is available the token\n   * can be refreshed with updateToken, or in cases where it is not (that is, with implicit flow)\n   * you can redirect to login screen to obtain a new access token.\n   */\n  KeycloakEventTypeLegacy[KeycloakEventTypeLegacy[\"OnTokenExpired\"] = 6] = \"OnTokenExpired\";\n  /**\n   * Called when a AIA has been requested by the application.\n   */\n  KeycloakEventTypeLegacy[KeycloakEventTypeLegacy[\"OnActionUpdate\"] = 7] = \"OnActionUpdate\";\n})(KeycloakEventTypeLegacy || (KeycloakEventTypeLegacy = {}));\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * A simple guard implementation out of the box. This class should be inherited and\n * implemented by the application. The only method that should be implemented is #isAccessAllowed.\n * The reason for this is that the authorization flow is usually not unique, so in this way you will\n * have more freedom to customize your authorization flow.\n *\n * @deprecated Class based guards are deprecated in Keycloak Angular and will be removed in future versions.\n * Use the new `createAuthGuard` function to create a Guard for your application.\n * More info: https://github.com/mauriciovigolo/keycloak-angular/docs/migration-guides/v19.md\n */\nclass KeycloakAuthGuard {\n  constructor(router, keycloakAngular) {\n    this.router = router;\n    this.keycloakAngular = keycloakAngular;\n  }\n  /**\n   * CanActivate checks if the user is logged in and get the full list of roles (REALM + CLIENT)\n   * of the logged user. This values are set to authenticated and roles params.\n   *\n   * @param route\n   * @param state\n   */\n  async canActivate(route, state) {\n    try {\n      this.authenticated = await this.keycloakAngular.isLoggedIn();\n      this.roles = await this.keycloakAngular.getUserRoles(true);\n      return await this.isAccessAllowed(route, state);\n    } catch (error) {\n      throw new Error('An error happened during access validation. Details:' + error);\n    }\n  }\n}\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * Service to expose existent methods from the Keycloak JS adapter, adding new\n * functionalities to improve the use of keycloak in Angular v > 4.3 applications.\n *\n * This class should be injected in the application bootstrap, so the same instance will be used\n * along the web application.\n *\n * @deprecated This service is deprecated and will be removed in future versions.\n * Use the new `provideKeycloak` function to load Keycloak in an Angular application.\n * More info: https://github.com/mauriciovigolo/keycloak-angular/docs/migration-guides/v19.md\n */\nclass KeycloakService {\n  constructor() {\n    /**\n     * Observer for the keycloak events\n     */\n    this._keycloakEvents$ = new Subject();\n  }\n  /**\n   * Binds the keycloak-js events to the keycloakEvents Subject\n   * which is a good way to monitor for changes, if needed.\n   *\n   * The keycloakEvents returns the keycloak-js event type and any\n   * argument if the source function provides any.\n   */\n  bindsKeycloakEvents() {\n    this._instance.onAuthError = errorData => {\n      this._keycloakEvents$.next({\n        args: errorData,\n        type: KeycloakEventTypeLegacy.OnAuthError\n      });\n    };\n    this._instance.onAuthLogout = () => {\n      this._keycloakEvents$.next({\n        type: KeycloakEventTypeLegacy.OnAuthLogout\n      });\n    };\n    this._instance.onAuthRefreshSuccess = () => {\n      this._keycloakEvents$.next({\n        type: KeycloakEventTypeLegacy.OnAuthRefreshSuccess\n      });\n    };\n    this._instance.onAuthRefreshError = () => {\n      this._keycloakEvents$.next({\n        type: KeycloakEventTypeLegacy.OnAuthRefreshError\n      });\n    };\n    this._instance.onAuthSuccess = () => {\n      this._keycloakEvents$.next({\n        type: KeycloakEventTypeLegacy.OnAuthSuccess\n      });\n    };\n    this._instance.onTokenExpired = () => {\n      this._keycloakEvents$.next({\n        type: KeycloakEventTypeLegacy.OnTokenExpired\n      });\n    };\n    this._instance.onActionUpdate = state => {\n      this._keycloakEvents$.next({\n        args: state,\n        type: KeycloakEventTypeLegacy.OnActionUpdate\n      });\n    };\n    this._instance.onReady = authenticated => {\n      this._keycloakEvents$.next({\n        args: authenticated,\n        type: KeycloakEventTypeLegacy.OnReady\n      });\n    };\n  }\n  /**\n   * Loads all bearerExcludedUrl content in a uniform type: ExcludedUrl,\n   * so it becomes easier to handle.\n   *\n   * @param bearerExcludedUrls array of strings or ExcludedUrl that includes\n   * the url and HttpMethod.\n   */\n  loadExcludedUrls(bearerExcludedUrls) {\n    const excludedUrls = [];\n    for (const item of bearerExcludedUrls) {\n      let excludedUrl;\n      if (typeof item === 'string') {\n        excludedUrl = {\n          urlPattern: new RegExp(item, 'i'),\n          httpMethods: []\n        };\n      } else {\n        excludedUrl = {\n          urlPattern: new RegExp(item.url, 'i'),\n          httpMethods: item.httpMethods\n        };\n      }\n      excludedUrls.push(excludedUrl);\n    }\n    return excludedUrls;\n  }\n  /**\n   * Handles the class values initialization.\n   *\n   * @param options\n   */\n  initServiceValues({\n    enableBearerInterceptor = true,\n    loadUserProfileAtStartUp = false,\n    bearerExcludedUrls = [],\n    authorizationHeaderName = 'Authorization',\n    bearerPrefix = 'Bearer',\n    initOptions,\n    updateMinValidity = 20,\n    shouldAddToken = () => true,\n    shouldUpdateToken = () => true\n  }) {\n    this._enableBearerInterceptor = enableBearerInterceptor;\n    this._loadUserProfileAtStartUp = loadUserProfileAtStartUp;\n    this._authorizationHeaderName = authorizationHeaderName;\n    this._bearerPrefix = bearerPrefix.trim().concat(' ');\n    this._excludedUrls = this.loadExcludedUrls(bearerExcludedUrls);\n    this._silentRefresh = initOptions ? initOptions.flow === 'implicit' : false;\n    this._updateMinValidity = updateMinValidity;\n    this.shouldAddToken = shouldAddToken;\n    this.shouldUpdateToken = shouldUpdateToken;\n  }\n  /**\n   * Keycloak initialization. It should be called to initialize the adapter.\n   * Options is an object with 2 main parameters: config and initOptions. The first one\n   * will be used to create the Keycloak instance. The second one are options to initialize the\n   * keycloak instance.\n   *\n   * @param options\n   * Config: may be a string representing the keycloak URI or an object with the\n   * following content:\n   * - url: Keycloak json URL\n   * - realm: realm name\n   * - clientId: client id\n   *\n   * initOptions:\n   * Options to initialize the Keycloak adapter, matches the options as provided by Keycloak itself.\n   *\n   * enableBearerInterceptor:\n   * Flag to indicate if the bearer will added to the authorization header.\n   *\n   * loadUserProfileInStartUp:\n   * Indicates that the user profile should be loaded at the keycloak initialization,\n   * just after the login.\n   *\n   * bearerExcludedUrls:\n   * String Array to exclude the urls that should not have the Authorization Header automatically\n   * added.\n   *\n   * authorizationHeaderName:\n   * This value will be used as the Authorization Http Header name.\n   *\n   * bearerPrefix:\n   * This value will be included in the Authorization Http Header param.\n   *\n   * tokenUpdateExcludedHeaders:\n   * Array of Http Header key/value maps that should not trigger the token to be updated.\n   *\n   * updateMinValidity:\n   * This value determines if the token will be refreshed based on its expiration time.\n   *\n   * @returns\n   * A Promise with a boolean indicating if the initialization was successful.\n   */\n  async init(options = {}) {\n    this.initServiceValues(options);\n    const {\n      config,\n      initOptions\n    } = options;\n    this._instance = new Keycloak(config);\n    this.bindsKeycloakEvents();\n    const authenticated = await this._instance.init(initOptions);\n    if (authenticated && this._loadUserProfileAtStartUp) {\n      await this.loadUserProfile();\n    }\n    return authenticated;\n  }\n  /**\n   * Redirects to login form on (options is an optional object with redirectUri and/or\n   * prompt fields).\n   *\n   * @param options\n   * Object, where:\n   *  - redirectUri: Specifies the uri to redirect to after login.\n   *  - prompt:By default the login screen is displayed if the user is not logged-in to Keycloak.\n   * To only authenticate to the application if the user is already logged-in and not display the\n   * login page if the user is not logged-in, set this option to none. To always require\n   * re-authentication and ignore SSO, set this option to login .\n   *  - maxAge: Used just if user is already authenticated. Specifies maximum time since the\n   * authentication of user happened. If user is already authenticated for longer time than\n   * maxAge, the SSO is ignored and he will need to re-authenticate again.\n   *  - loginHint: Used to pre-fill the username/email field on the login form.\n   *  - action: If value is 'register' then user is redirected to registration page, otherwise to\n   * login page.\n   *  - locale: Specifies the desired locale for the UI.\n   * @returns\n   * A void Promise if the login is successful and after the user profile loading.\n   */\n  async login(options = {}) {\n    await this._instance.login(options);\n    if (this._loadUserProfileAtStartUp) {\n      await this.loadUserProfile();\n    }\n  }\n  /**\n   * Redirects to logout.\n   *\n   * @param redirectUri\n   * Specifies the uri to redirect to after logout.\n   * @returns\n   * A void Promise if the logout was successful, cleaning also the userProfile.\n   */\n  async logout(redirectUri) {\n    const options = {\n      redirectUri\n    };\n    await this._instance.logout(options);\n    this._userProfile = undefined;\n  }\n  /**\n   * Redirects to registration form. Shortcut for login with option\n   * action = 'register'. Options are same as for the login method but 'action' is set to\n   * 'register'.\n   *\n   * @param options\n   * login options\n   * @returns\n   * A void Promise if the register flow was successful.\n   */\n  async register(options = {\n    action: 'register'\n  }) {\n    await this._instance.register(options);\n  }\n  /**\n   * Check if the user has access to the specified role. It will look for roles in\n   * realm and the given resource, but will not check if the user is logged in for better performance.\n   *\n   * @param role\n   * role name\n   * @param resource\n   * resource name. If not specified, `clientId` is used\n   * @returns\n   * A boolean meaning if the user has the specified Role.\n   */\n  isUserInRole(role, resource) {\n    let hasRole;\n    hasRole = this._instance.hasResourceRole(role, resource);\n    if (!hasRole) {\n      hasRole = this._instance.hasRealmRole(role);\n    }\n    return hasRole;\n  }\n  /**\n   * Return the roles of the logged user. The realmRoles parameter, with default value\n   * true, will return the resource roles and realm roles associated with the logged user. If set to false\n   * it will only return the resource roles. The resource parameter, if specified, will return only resource roles\n   * associated with the given resource.\n   *\n   * @param realmRoles\n   * Set to false to exclude realm roles (only client roles)\n   * @param resource\n   * resource name If not specified, returns roles from all resources\n   * @returns\n   * Array of Roles associated with the logged user.\n   */\n  getUserRoles(realmRoles = true, resource) {\n    let roles = [];\n    if (this._instance.resourceAccess) {\n      Object.keys(this._instance.resourceAccess).forEach(key => {\n        if (resource && resource !== key) {\n          return;\n        }\n        const resourceAccess = this._instance.resourceAccess[key];\n        const clientRoles = resourceAccess['roles'] || [];\n        roles = roles.concat(clientRoles);\n      });\n    }\n    if (realmRoles && this._instance.realmAccess) {\n      const realmRoles = this._instance.realmAccess['roles'] || [];\n      roles.push(...realmRoles);\n    }\n    return roles;\n  }\n  /**\n   * Check if user is logged in.\n   *\n   * @returns\n   * A boolean that indicates if the user is logged in.\n   */\n  isLoggedIn() {\n    if (!this._instance) {\n      return false;\n    }\n    return this._instance.authenticated;\n  }\n  /**\n   * Returns true if the token has less than minValidity seconds left before\n   * it expires.\n   *\n   * @param minValidity\n   * Seconds left. (minValidity) is optional. Default value is 0.\n   * @returns\n   * Boolean indicating if the token is expired.\n   */\n  isTokenExpired(minValidity = 0) {\n    return this._instance.isTokenExpired(minValidity);\n  }\n  /**\n   * If the token expires within _updateMinValidity seconds the token is refreshed. If the\n   * session status iframe is enabled, the session status is also checked.\n   * Returns a promise telling if the token was refreshed or not. If the session is not active\n   * anymore, the promise is rejected.\n   *\n   * @param minValidity\n   * Seconds left. (minValidity is optional, if not specified updateMinValidity - default 20 is used)\n   * @returns\n   * Promise with a boolean indicating if the token was succesfully updated.\n   */\n  async updateToken(minValidity = this._updateMinValidity) {\n    // TODO: this is a workaround until the silent refresh (issue #43)\n    // is not implemented, avoiding the redirect loop.\n    if (this._silentRefresh) {\n      if (this.isTokenExpired()) {\n        throw new Error('Failed to refresh the token, or the session is expired');\n      }\n      return true;\n    }\n    if (!this._instance) {\n      throw new Error('Keycloak Angular library is not initialized.');\n    }\n    try {\n      return await this._instance.updateToken(minValidity);\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * Loads the user profile.\n   * Returns promise to set functions to be invoked if the profile was loaded\n   * successfully, or if the profile could not be loaded.\n   *\n   * @param forceReload\n   * If true will force the loadUserProfile even if its already loaded.\n   * @returns\n   * A promise with the KeycloakProfile data loaded.\n   */\n  async loadUserProfile(forceReload = false) {\n    if (this._userProfile && !forceReload) {\n      return this._userProfile;\n    }\n    if (!this._instance.authenticated) {\n      throw new Error('The user profile was not loaded as the user is not logged in.');\n    }\n    return this._userProfile = await this._instance.loadUserProfile();\n  }\n  /**\n   * Returns the authenticated token.\n   */\n  async getToken() {\n    return this._instance.token;\n  }\n  /**\n   * Returns the logged username.\n   *\n   * @returns\n   * The logged username.\n   */\n  getUsername() {\n    if (!this._userProfile) {\n      throw new Error('User not logged in or user profile was not loaded.');\n    }\n    return this._userProfile.username;\n  }\n  /**\n   * Clear authentication state, including tokens. This can be useful if application\n   * has detected the session was expired, for example if updating token fails.\n   * Invoking this results in onAuthLogout callback listener being invoked.\n   */\n  clearToken() {\n    this._instance.clearToken();\n  }\n  /**\n   * Adds a valid token in header. The key & value format is:\n   * Authorization Bearer <token>.\n   * If the headers param is undefined it will create the Angular headers object.\n   *\n   * @param headers\n   * Updated header with Authorization and Keycloak token.\n   * @returns\n   * An observable with with the HTTP Authorization header and the current token.\n   */\n  addTokenToHeader(headers = new HttpHeaders()) {\n    return from(this.getToken()).pipe(map(token => token ? headers.set(this._authorizationHeaderName, this._bearerPrefix + token) : headers));\n  }\n  /**\n   * Returns the original Keycloak instance, if you need any customization that\n   * this Angular service does not support yet. Use with caution.\n   *\n   * @returns\n   * The KeycloakInstance from keycloak-js.\n   */\n  getKeycloakInstance() {\n    return this._instance;\n  }\n  /**\n   * @deprecated\n   * Returns the excluded URLs that should not be considered by\n   * the http interceptor which automatically adds the authorization header in the Http Request.\n   *\n   * @returns\n   * The excluded urls that must not be intercepted by the KeycloakBearerInterceptor.\n   */\n  get excludedUrls() {\n    return this._excludedUrls;\n  }\n  /**\n   * Flag to indicate if the bearer will be added to the authorization header.\n   *\n   * @returns\n   * Returns if the bearer interceptor was set to be disabled.\n   */\n  get enableBearerInterceptor() {\n    return this._enableBearerInterceptor;\n  }\n  /**\n   * Keycloak subject to monitor the events triggered by keycloak-js.\n   * The following events as available (as described at keycloak docs -\n   * https://www.keycloak.org/docs/latest/securing_apps/index.html#callback-events):\n   * - OnAuthError\n   * - OnAuthLogout\n   * - OnAuthRefreshError\n   * - OnAuthRefreshSuccess\n   * - OnAuthSuccess\n   * - OnReady\n   * - OnTokenExpire\n   * In each occurrence of any of these, this subject will return the event type,\n   * described at {@link KeycloakEventTypeLegacy} enum and the function args from the keycloak-js\n   * if provided any.\n   *\n   * @returns\n   * A subject with the {@link KeycloakEventLegacy} which describes the event type and attaches the\n   * function args.\n   */\n  get keycloakEvents$() {\n    return this._keycloakEvents$;\n  }\n  static {\n    this.ɵfac = function KeycloakService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || KeycloakService)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: KeycloakService,\n      factory: KeycloakService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeycloakService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * This interceptor includes the bearer by default in all HttpClient requests.\n *\n * If you need to exclude some URLs from adding the bearer, please, take a look\n * at the {@link KeycloakOptions} bearerExcludedUrls property.\n *\n * @deprecated KeycloakBearerInterceptor is deprecated and will be removed in future versions.\n * Use the new functional interceptor such as `includeBearerTokenInterceptor`.\n * More info: https://github.com/mauriciovigolo/keycloak-angular/docs/migration-guides/v19.md\n */\nclass KeycloakBearerInterceptor {\n  constructor(keycloak) {\n    this.keycloak = keycloak;\n  }\n  /**\n   * Calls to update the keycloak token if the request should update the token.\n   *\n   * @param req http request from @angular http module.\n   * @returns\n   * A promise boolean for the token update or noop result.\n   */\n  async conditionallyUpdateToken(req) {\n    if (this.keycloak.shouldUpdateToken(req)) {\n      return await this.keycloak.updateToken();\n    }\n    return true;\n  }\n  /**\n   * @deprecated\n   * Checks if the url is excluded from having the Bearer Authorization\n   * header added.\n   *\n   * @param req http request from @angular http module.\n   * @param excludedUrlRegex contains the url pattern and the http methods,\n   * excluded from adding the bearer at the Http Request.\n   */\n  isUrlExcluded({\n    method,\n    url\n  }, {\n    urlPattern,\n    httpMethods\n  }) {\n    const httpTest = httpMethods.length === 0 || httpMethods.join().indexOf(method.toUpperCase()) > -1;\n    const urlTest = urlPattern.test(url);\n    return httpTest && urlTest;\n  }\n  /**\n   * Intercept implementation that checks if the request url matches the excludedUrls.\n   * If not, adds the Authorization header to the request if the user is logged in.\n   *\n   * @param req\n   * @param next\n   */\n  intercept(req, next) {\n    const {\n      enableBearerInterceptor,\n      excludedUrls\n    } = this.keycloak;\n    if (!enableBearerInterceptor) {\n      return next.handle(req);\n    }\n    const shallPass = !this.keycloak.shouldAddToken(req) || excludedUrls.findIndex(item => this.isUrlExcluded(req, item)) > -1;\n    if (shallPass) {\n      return next.handle(req);\n    }\n    return combineLatest([from(this.conditionallyUpdateToken(req)), of(this.keycloak.isLoggedIn())]).pipe(mergeMap(([_, isLoggedIn]) => isLoggedIn ? this.handleRequestWithTokenHeader(req, next) : next.handle(req)));\n  }\n  /**\n   * Adds the token of the current user to the Authorization header\n   *\n   * @param req\n   * @param next\n   */\n  handleRequestWithTokenHeader(req, next) {\n    return this.keycloak.addTokenToHeader(req.headers).pipe(mergeMap(headersWithBearer => {\n      const kcReq = req.clone({\n        headers: headersWithBearer\n      });\n      return next.handle(kcReq);\n    }));\n  }\n  static {\n    this.ɵfac = function KeycloakBearerInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || KeycloakBearerInterceptor)(i0.ɵɵinject(KeycloakService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: KeycloakBearerInterceptor,\n      factory: KeycloakBearerInterceptor.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeycloakBearerInterceptor, [{\n    type: Injectable\n  }], () => [{\n    type: KeycloakService\n  }], null);\n})();\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * @deprecated NgModules are deprecated in Keycloak Angular and will be removed in future versions.\n * Use the new `provideKeycloak` function to load Keycloak in an Angular application.\n * More info: https://github.com/mauriciovigolo/keycloak-angular/docs/migration-guides/v19.md\n */\nclass CoreModule {\n  static {\n    this.ɵfac = function CoreModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CoreModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: CoreModule,\n      imports: [CommonModule]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [KeycloakService, {\n        provide: HTTP_INTERCEPTORS,\n        useClass: KeycloakBearerInterceptor,\n        multi: true\n      }],\n      imports: [CommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CoreModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [KeycloakService, {\n        provide: HTTP_INTERCEPTORS,\n        useClass: KeycloakBearerInterceptor,\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo and contributors.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * @deprecated NgModules are deprecated in Keycloak Angular and will be removed in future versions.\n * Use the new `provideKeycloak` function to load Keycloak in an Angular application.\n * More info: https://github.com/mauriciovigolo/keycloak-angular/docs/migration-guides/v19.md\n */\nclass KeycloakAngularModule {\n  static {\n    this.ɵfac = function KeycloakAngularModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || KeycloakAngularModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: KeycloakAngularModule,\n      imports: [CoreModule]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CoreModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeycloakAngularModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CoreModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo All Rights Reserved.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n// This legacy implementation will be removed in Keycloak Angular v20\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo All Rights Reserved.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * Keycloak event types, as described at the keycloak-js documentation:\n * https://www.keycloak.org/docs/latest/securing_apps/index.html#callback-events\n */\nvar KeycloakEventType;\n(function (KeycloakEventType) {\n  /**\n   * Keycloak Angular is not initialized yet. This is the initial state applied to the Keycloak Event Signal.\n   * Note: This event is only emitted in Keycloak Angular, it is not part of the keycloak-js.\n   */\n  KeycloakEventType[\"KeycloakAngularNotInitialized\"] = \"KeycloakAngularNotInitialized\";\n  /**\n   * Keycloak Angular is in the process of initializing the providers and Keycloak Instance.\n   * Note: This event is only emitted in Keycloak Angular, it is not part of the keycloak-js.\n   */\n  KeycloakEventType[\"KeycloakAngularInit\"] = \"KeycloakAngularInit\";\n  /**\n   * Triggered if there is an error during authentication.\n   */\n  KeycloakEventType[\"AuthError\"] = \"AuthError\";\n  /**\n   * Triggered when the user logs out. This event will only be triggered\n   * if the session status iframe is enabled or in Cordova mode.\n   */\n  KeycloakEventType[\"AuthLogout\"] = \"AuthLogout\";\n  /**\n   * Triggered if an error occurs while attempting to refresh the token.\n   */\n  KeycloakEventType[\"AuthRefreshError\"] = \"AuthRefreshError\";\n  /**\n   * Triggered when the token is successfully refreshed.\n   */\n  KeycloakEventType[\"AuthRefreshSuccess\"] = \"AuthRefreshSuccess\";\n  /**\n   * Triggered when a user is successfully authenticated.\n   */\n  KeycloakEventType[\"AuthSuccess\"] = \"AuthSuccess\";\n  /**\n   * Triggered when the Keycloak adapter has completed initialization.\n   */\n  KeycloakEventType[\"Ready\"] = \"Ready\";\n  /**\n   * Triggered when the access token expires. Depending on the flow, you may\n   * need to use `updateToken` to refresh the token or redirect the user\n   * to the login screen.\n   */\n  KeycloakEventType[\"TokenExpired\"] = \"TokenExpired\";\n  /**\n   * Triggered when an authentication action is requested by the application.\n   */\n  KeycloakEventType[\"ActionUpdate\"] = \"ActionUpdate\";\n})(KeycloakEventType || (KeycloakEventType = {}));\n/**\n * Helper function to typecast unknown arguments into a specific Keycloak event type.\n *\n * @template T - The expected argument type.\n * @param args - The arguments to be cast.\n * @returns The arguments typed as `T`.\n */\nconst typeEventArgs = args => args;\n/**\n * Creates a signal to manage Keycloak events, initializing the signal with\n * appropriate default values or values from a given Keycloak instance.\n *\n * @param keycloak - An instance of the Keycloak client.\n * @returns A `Signal` that tracks the current Keycloak event state.\n */\nconst createKeycloakSignal = keycloak => {\n  const keycloakSignal = signal({\n    type: KeycloakEventType.KeycloakAngularInit\n  });\n  if (!keycloak) {\n    keycloakSignal.set({\n      type: KeycloakEventType.KeycloakAngularNotInitialized\n    });\n    return keycloakSignal;\n  }\n  keycloak.onReady = authenticated => {\n    keycloakSignal.set({\n      type: KeycloakEventType.Ready,\n      args: authenticated\n    });\n  };\n  keycloak.onAuthError = errorData => {\n    keycloakSignal.set({\n      type: KeycloakEventType.AuthError,\n      args: errorData\n    });\n  };\n  keycloak.onAuthLogout = () => {\n    keycloakSignal.set({\n      type: KeycloakEventType.AuthLogout\n    });\n  };\n  keycloak.onActionUpdate = (status, action) => {\n    keycloakSignal.set({\n      type: KeycloakEventType.ActionUpdate,\n      args: {\n        status,\n        action\n      }\n    });\n  };\n  keycloak.onAuthRefreshError = () => {\n    keycloakSignal.set({\n      type: KeycloakEventType.AuthRefreshError\n    });\n  };\n  keycloak.onAuthRefreshSuccess = () => {\n    keycloakSignal.set({\n      type: KeycloakEventType.AuthRefreshSuccess\n    });\n  };\n  keycloak.onAuthSuccess = () => {\n    keycloakSignal.set({\n      type: KeycloakEventType.AuthSuccess\n    });\n  };\n  keycloak.onTokenExpired = () => {\n    keycloakSignal.set({\n      type: KeycloakEventType.TokenExpired\n    });\n  };\n  return keycloakSignal;\n};\n/**\n * Injection token for the Keycloak events signal, used for dependency injection.\n */\nconst KEYCLOAK_EVENT_SIGNAL = new InjectionToken('Keycloak Events Signal');\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo All Rights Reserved.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * Structural directive to conditionally display elements based on Keycloak user roles.\n *\n * This directive checks if the authenticated user has at least one of the specified roles.\n * Roles can be validated against a specific **resource (client ID)** or the **realm**.\n *\n * ### Features:\n * - Supports role checking in both **resources (client-level roles)** and the **realm**.\n * - Accepts an array of roles to match.\n * - Optional configuration to check realm-level roles.\n *\n * ### Inputs:\n * - `kaHasRoles` (Required): Array of roles to validate.\n * - `resource` (Optional): The client ID or resource name to validate resource-level roles.\n * - `checkRealm` (Optional): A boolean flag to enable realm role validation (default is `false`).\n *\n * ### Requirements:\n * - A Keycloak instance must be injected via Angular's dependency injection.\n * - The user must be authenticated in Keycloak.\n *\n * @example\n * #### Example 1: Check for Global Realm Roles\n * Show the content only if the user has the `admin` or `editor` role in the realm.\n * ```html\n * <div *kaHasRoles=\"['admin', 'editor']; checkRealm:true\">\n *   <p>This content is visible only to users with 'admin' or 'editor' realm roles.</p>\n * </div>\n * ```\n *\n * @example\n * #### Example 2: Check for Resource Roles\n * Show the content only if the user has the `read` or `write` role for a specific resource (`my-client`).\n * ```html\n * <div *kaHasRoles=\"['read', 'write']; resource:'my-client'\">\n *   <p>This content is visible only to users with 'read' or 'write' roles for 'my-client'.</p>\n * </div>\n * ```\n *\n * @example\n * #### Example 3: Check for Both Resource and Realm Roles\n * Show the content if the user has the roles in either the realm or a resource.\n * ```html\n * <div *kaHasRoles=\"['admin', 'write']; resource:'my-client' checkRealm:true\">\n *   <p>This content is visible to users with 'admin' in the realm or 'write' in 'my-client'.</p>\n * </div>\n * ```\n *\n * @example\n * #### Example 4: Fallback Content When Roles Do Not Match\n * Use an `<ng-template>` to display fallback content if the user lacks the required roles.\n * ```html\n * <div *kaHasRoles=\"['admin']; resource:'my-client'\">\n *   <p>Welcome, Admin!</p>\n * </div>\n * <ng-template #noAccess>\n *   <p>Access Denied</p>\n * </ng-template>\n * ```\n */\nclass HasRolesDirective {\n  constructor(templateRef, viewContainer, keycloak) {\n    this.templateRef = templateRef;\n    this.viewContainer = viewContainer;\n    this.keycloak = keycloak;\n    /**\n     * List of roles to validate against the resource or realm.\n     */\n    this.roles = [];\n    /**\n     * Flag to enable realm-level role validation.\n     */\n    this.checkRealm = false;\n    this.viewContainer.clear();\n    const keycloakSignal = inject(KEYCLOAK_EVENT_SIGNAL);\n    effect(() => {\n      const keycloakEvent = keycloakSignal();\n      if (keycloakEvent.type !== KeycloakEventType.Ready) {\n        return;\n      }\n      const authenticated = typeEventArgs(keycloakEvent.args);\n      if (authenticated) {\n        this.render();\n      }\n    });\n  }\n  render() {\n    const hasAccess = this.checkUserRoles();\n    if (hasAccess) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    } else {\n      this.viewContainer.clear();\n    }\n  }\n  /**\n   * Checks if the user has at least one of the specified roles in the resource or realm.\n   * @returns True if the user has access, false otherwise.\n   */\n  checkUserRoles() {\n    const hasResourceRole = this.roles.some(role => this.keycloak.hasResourceRole(role, this.resource));\n    const hasRealmRole = this.checkRealm ? this.roles.some(role => this.keycloak.hasRealmRole(role)) : false;\n    return hasResourceRole || hasRealmRole;\n  }\n  static {\n    this.ɵfac = function HasRolesDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HasRolesDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(Keycloak));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: HasRolesDirective,\n      selectors: [[\"\", \"kaHasRoles\", \"\"]],\n      inputs: {\n        roles: [0, \"kaHasRoles\", \"roles\"],\n        resource: [0, \"kaHasRolesResource\", \"resource\"],\n        checkRealm: [0, \"kaHasRolesCheckRealm\", \"checkRealm\"]\n      }\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HasRolesDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[kaHasRoles]'\n    }]\n  }], () => [{\n    type: i0.TemplateRef\n  }, {\n    type: i0.ViewContainerRef\n  }, {\n    type: Keycloak\n  }], {\n    roles: [{\n      type: Input,\n      args: ['kaHasRoles']\n    }],\n    resource: [{\n      type: Input,\n      args: ['kaHasRolesResource']\n    }],\n    checkRealm: [{\n      type: Input,\n      args: ['kaHasRolesCheckRealm']\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo All Rights Reserved.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo All Rights Reserved.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * Service to monitor user activity in an Angular application.\n * Tracks user interactions (e.g., mouse movement, touch, key presses, clicks, and scrolls)\n * and updates the last activity timestamp. Consumers can check for user inactivity\n * based on a configurable timeout.\n *\n * The service is supposed to be used in the client context and for safety, it checks during the startup\n * if it is a browser context.\n */\nclass UserActivityService {\n  constructor(ngZone) {\n    this.ngZone = ngZone;\n    /**\n     * Signal to store the timestamp of the last user activity.\n     * The timestamp is represented as the number of milliseconds since epoch.\n     */\n    this.lastActivity = signal(Date.now());\n    /**\n     * Subject to signal the destruction of the service.\n     * Used to clean up RxJS subscriptions.\n     */\n    this.destroy$ = new Subject();\n    /**\n     * Computed signal to expose the last user activity as a read-only signal.\n     */\n    this.lastActivitySignal = computed(() => this.lastActivity());\n  }\n  /**\n   * Starts monitoring user activity events (`mousemove`, `touchstart`, `keydown`, `click`, `scroll`)\n   * and updates the last activity timestamp using RxJS with debounce.\n   * The events are processed outside Angular zone for performance optimization.\n   */\n  startMonitoring() {\n    const isBrowser = isPlatformBrowser(inject(PLATFORM_ID));\n    if (!isBrowser) {\n      return;\n    }\n    this.ngZone.runOutsideAngular(() => {\n      const events = ['mousemove', 'touchstart', 'keydown', 'click', 'scroll'];\n      events.forEach(event => {\n        fromEvent(window, event).pipe(debounceTime(300), takeUntil(this.destroy$)).subscribe(() => this.updateLastActivity());\n      });\n    });\n  }\n  /**\n   * Updates the last activity timestamp to the current time.\n   * This method runs inside Angular's zone to ensure reactivity with Angular signals.\n   */\n  updateLastActivity() {\n    this.ngZone.run(() => {\n      this.lastActivity.set(Date.now());\n    });\n  }\n  /**\n   * Retrieves the timestamp of the last recorded user activity.\n   * @returns {number} The last activity timestamp in milliseconds since epoch.\n   */\n  get lastActivityTime() {\n    return this.lastActivity();\n  }\n  /**\n   * Determines whether the user interacted with the application, meaning it is activily using the application, based on\n   * the specified duration.\n   * @param timeout - The inactivity timeout in milliseconds.\n   * @returns {boolean} `true` if the user is inactive, otherwise `false`.\n   */\n  isActive(timeout) {\n    return Date.now() - this.lastActivityTime < timeout;\n  }\n  /**\n   * Cleans up RxJS subscriptions and resources when the service is destroyed.\n   * This method is automatically called by Angular when the service is removed.\n   */\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  static {\n    this.ɵfac = function UserActivityService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UserActivityService)(i0.ɵɵinject(i0.NgZone));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: UserActivityService,\n      factory: UserActivityService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserActivityService, [{\n    type: Injectable\n  }], () => [{\n    type: i0.NgZone\n  }], null);\n})();\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo All Rights Reserved.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * Service to automatically manage the Keycloak token refresh process\n * based on user activity and token expiration events. This service\n * integrates with Keycloak for session management and interacts with\n * user activity monitoring to determine the appropriate action when\n * the token expires.\n *\n * The service listens to `KeycloakSignal` for token-related events\n * (e.g., `TokenExpired`) and provides configurable options for\n * session timeout and inactivity handling.\n */\nclass AutoRefreshTokenService {\n  constructor(keycloak, userActivity) {\n    this.keycloak = keycloak;\n    this.userActivity = userActivity;\n    this.options = this.defaultOptions;\n    this.initialized = false;\n    const keycloakSignal = inject(KEYCLOAK_EVENT_SIGNAL);\n    effect(() => {\n      const keycloakEvent = keycloakSignal();\n      if (keycloakEvent.type === KeycloakEventType.TokenExpired) {\n        this.processTokenExpiredEvent();\n      }\n    });\n  }\n  get defaultOptions() {\n    return {\n      sessionTimeout: 300000,\n      onInactivityTimeout: 'logout'\n    };\n  }\n  executeOnInactivityTimeout() {\n    switch (this.options.onInactivityTimeout) {\n      case 'login':\n        this.keycloak.login().catch(error => console.error('Failed to execute the login call', error));\n        break;\n      case 'logout':\n        this.keycloak.logout().catch(error => console.error('Failed to execute the logout call', error));\n        break;\n      default:\n        break;\n    }\n  }\n  processTokenExpiredEvent() {\n    if (!this.initialized || !this.keycloak.authenticated) {\n      return;\n    }\n    if (this.userActivity.isActive(this.options.sessionTimeout)) {\n      this.keycloak.updateToken().catch(() => this.executeOnInactivityTimeout());\n    } else {\n      this.executeOnInactivityTimeout();\n    }\n  }\n  start(options) {\n    this.options = {\n      ...this.defaultOptions,\n      ...options\n    };\n    this.initialized = true;\n    this.userActivity.startMonitoring();\n  }\n  static {\n    this.ɵfac = function AutoRefreshTokenService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AutoRefreshTokenService)(i0.ɵɵinject(Keycloak), i0.ɵɵinject(UserActivityService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: AutoRefreshTokenService,\n      factory: AutoRefreshTokenService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AutoRefreshTokenService, [{\n    type: Injectable\n  }], () => [{\n    type: Keycloak\n  }, {\n    type: UserActivityService\n  }], null);\n})();\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo All Rights Reserved.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * Enables automatic token refresh and session inactivity handling for a\n * Keycloak-enabled Angular application.\n *\n * This function initializes a service that tracks user interactions, such as\n * mouse movements, touches, key presses, clicks, and scrolls. If user activity\n * is detected, it periodically calls `Keycloak.updateToken` to ensure the bearer\n * token remains valid and does not expire.\n *\n * If the session remains inactive beyond the defined `sessionTimeout`, the\n * specified action (`logout`, `login`, or `none`) will be executed. By default,\n * the service will call `keycloak.logout` upon inactivity timeout.\n *\n * Event tracking uses RxJS observables with a debounce of 300 milliseconds to\n * monitor user interactions. When the Keycloak `OnTokenExpired` event occurs,\n * the service checks the user's last activity timestamp. If the user has been\n * active within the session timeout period, it refreshes the token using `updateToken`.\n *\n *\n * @param options - Configuration options for the auto-refresh token feature.\n *   - `sessionTimeout` (optional): The duration in milliseconds after which\n *     the session is considered inactive. Defaults to `300000` (5 minutes).\n *   - `onInactivityTimeout` (optional): The action to take when session inactivity\n *     exceeds the specified timeout. Defaults to `'logout'`.\n *       - `'login'`: Execute `keycloak.login` function.\n *       - `'logout'`: Logs the user out by calling `keycloak.logout`.\n *       - `'none'`: No action is taken.\n *\n * @returns A `KeycloakFeature` instance that configures and enables the\n * auto-refresh token functionality.\n */\nfunction withAutoRefreshToken(options) {\n  return {\n    configure: () => {\n      const autoRefreshTokenService = inject(AutoRefreshTokenService);\n      autoRefreshTokenService.start(options);\n    }\n  };\n}\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo All Rights Reserved.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\nconst mapResourceRoles = (resourceAccess = {}) => {\n  return Object.entries(resourceAccess).reduce((roles, [key, value]) => {\n    roles[key] = value.roles;\n    return roles;\n  }, {});\n};\n/**\n * Creates a custom authorization guard for Angular routes, enabling fine-grained access control.\n *\n * This guard invokes the provided `isAccessAllowed` function to determine if access is permitted\n * based on the current route, router state, and user's authentication and roles data.\n *\n * @template T - The type of the guard function (`CanActivateFn` or `CanActivateChildFn`).\n * @param isAccessAllowed - A callback function that evaluates access conditions. The function receives:\n *   - `route`: The current `ActivatedRouteSnapshot` for the route being accessed.\n *   - `state`: The current `RouterStateSnapshot` representing the router's state.\n *   - `authData`: An `AuthGuardData` object containing the user's authentication status, roles, and Keycloak instance.\n * @returns A guard function of type `T` that can be used as a route `canActivate` or `canActivateChild` guard.\n *\n * @example\n * ```ts\n * import { createAuthGuard } from './auth-guard';\n * import { Routes } from '@angular/router';\n *\n * const isUserAllowed = async (route, state, authData) => {\n *   const { authenticated, grantedRoles } = authData;\n *   return authenticated && grantedRoles.realmRoles.includes('admin');\n * };\n *\n * const routes: Routes = [\n *   {\n *     path: 'admin',\n *     canActivate: [createAuthGuard(isUserAllowed)],\n *     component: AdminComponent,\n *   },\n * ];\n * ```\n */\nconst createAuthGuard = isAccessAllowed => {\n  return (next, state) => {\n    const keycloak = inject(Keycloak);\n    const authenticated = keycloak?.authenticated ?? false;\n    const grantedRoles = {\n      resourceRoles: mapResourceRoles(keycloak?.resourceAccess),\n      realmRoles: keycloak?.realmAccess?.roles ?? []\n    };\n    const authData = {\n      authenticated,\n      keycloak,\n      grantedRoles\n    };\n    return isAccessAllowed(next, state, authData);\n  };\n};\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo All Rights Reserved.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * Default value for the authorization header prefix, used to construct the Authorization token.\n */\nconst BEARER_PREFIX = 'Bearer';\n/**\n * Default name of the authorization header.\n */\nconst AUTHORIZATION_HEADER_NAME = 'Authorization';\n/**\n * Generic factory function to create an interceptor condition with default values.\n *\n * This utility allows you to define custom interceptor conditions while ensuring that\n * default values are applied to any missing fields. By using generics, you can enforce\n * strong typing when creating the fields for the interceptor condition, enhancing type safety.\n *\n * @template T - A type that extends `AuthBearerCondition`.\n * @param value - An object of type `T` (extending `AuthBearerCondition`) to be enhanced with default values.\n * @returns A new object of type `T` with default values assigned to any undefined properties.\n */\nconst createInterceptorCondition = value => ({\n  ...value,\n  bearerPrefix: value.bearerPrefix ?? BEARER_PREFIX,\n  authorizationHeaderName: value.authorizationHeaderName ?? AUTHORIZATION_HEADER_NAME,\n  shouldUpdateToken: value.shouldUpdateToken ?? (() => true)\n});\n/**\n * Conditionally updates the Keycloak token based on the provided request and conditions.\n *\n * @param req - The `HttpRequest` object being processed.\n * @param keycloak - The Keycloak instance managing authentication.\n * @param condition - An `AuthBearerCondition` object with the `shouldUpdateToken` function.\n * @returns A `Promise<boolean>` indicating whether the token was successfully updated.\n */\nconst conditionallyUpdateToken = async (req, keycloak, {\n  shouldUpdateToken = _ => true\n}) => {\n  if (shouldUpdateToken(req)) {\n    return await keycloak.updateToken().catch(() => false);\n  }\n  return true;\n};\n/**\n * Adds the Authorization header to an HTTP request and forwards it to the next handler.\n *\n * @param req - The original `HttpRequest` object.\n * @param next - The `HttpHandlerFn` function for forwarding the HTTP request.\n * @param keycloak - The Keycloak instance providing the authentication token.\n * @param condition - An `AuthBearerCondition` object specifying header configuration.\n * @returns An `Observable<HttpEvent<unknown>>` representing the HTTP response.\n */\nconst addAuthorizationHeader = (req, next, keycloak, condition) => {\n  const {\n    bearerPrefix = BEARER_PREFIX,\n    authorizationHeaderName = AUTHORIZATION_HEADER_NAME\n  } = condition;\n  const clonedRequest = req.clone({\n    setHeaders: {\n      [authorizationHeaderName]: `${bearerPrefix} ${keycloak.token}`\n    }\n  });\n  return next(clonedRequest);\n};\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo All Rights Reserved.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * Injection token for configuring the `customBearerTokenInterceptor`.\n *\n * This injection token holds an array of `CustomBearerTokenCondition` objects, which define\n * the conditions under which a Bearer token should be included in the `Authorization` header\n * of outgoing HTTP requests. Each condition provides a `shouldAddToken` function that dynamically\n * determines whether the token should be added based on the request, handler, and Keycloak state.\n */\nconst CUSTOM_BEARER_TOKEN_INTERCEPTOR_CONFIG = new InjectionToken('Include the bearer token as implemented by the provided function');\n/**\n * Custom HTTP Interceptor for dynamically adding a Bearer token to requests based on conditions.\n *\n * This interceptor uses a flexible approach where the decision to include a Bearer token in the\n * `Authorization` HTTP header is determined by a user-provided function (`shouldAddToken`).\n * This enables a dynamic and granular control over when tokens are added to HTTP requests.\n *\n * ### Key Features:\n * 1. **Dynamic Token Inclusion**: Uses a condition function (`shouldAddToken`) to decide dynamically\n *    whether to add the token based on the request, Keycloak state, and other factors.\n * 2. **Token Management**: Optionally refreshes the Keycloak token before adding it to the request.\n * 3. **Controlled Authorization**: Adds the Bearer token only when the condition function allows\n *    and the user is authenticated in Keycloak.\n *\n * ### Configuration:\n * The interceptor relies on `CUSTOM_BEARER_TOKEN_INTERCEPTOR_CONFIG`, an injection token that contains\n * an array of `CustomBearerTokenCondition` objects. Each condition specifies a `shouldAddToken` function\n * that determines whether to add the Bearer token for a given request.\n *\n * ### Workflow:\n * 1. Reads the conditions from the `CUSTOM_BEARER_TOKEN_INTERCEPTOR_CONFIG` injection token.\n * 2. Iterates through the conditions and evaluates the `shouldAddToken` function for the request.\n * 3. If a condition matches:\n *    - Optionally refreshes the Keycloak token if needed.\n *    - Adds the Bearer token to the request's `Authorization` header if the user is authenticated.\n * 4. If no conditions match, the request proceeds unchanged.\n *\n * ### Parameters:\n * @param req - The `HttpRequest` object representing the outgoing HTTP request.\n * @param next - The `HttpHandlerFn` for passing the request to the next handler in the chain.\n *\n * @returns An `Observable<HttpEvent<unknown>>` representing the HTTP response.\n *\n * ### Usage Example:\n * ```typescript\n * // Define a custom condition to include the token\n * const customCondition: CustomBearerTokenCondition = {\n *   shouldAddToken: async (req, next, keycloak) => {\n *     // Add token only for requests to the /api endpoint\n *     return req.url.startsWith('/api') && keycloak.authenticated;\n *   },\n * };\n *\n * // Configure the interceptor with the custom condition\n * export const appConfig: ApplicationConfig = {\n *   providers: [\n *     provideHttpClient(withInterceptors([customBearerTokenInterceptor])),\n *     {\n *       provide: CUSTOM_BEARER_TOKEN_INTERCEPTOR_CONFIG,\n *       useValue: [customCondition],\n *     },\n *   ],\n * };\n * ```\n */\nconst customBearerTokenInterceptor = (req, next) => {\n  const conditions = inject(CUSTOM_BEARER_TOKEN_INTERCEPTOR_CONFIG) ?? [];\n  const keycloak = inject(Keycloak);\n  const matchingCondition = conditions.find(async condition => await condition.shouldAddToken(req, next, keycloak));\n  if (!matchingCondition) {\n    return next(req);\n  }\n  return from(conditionallyUpdateToken(req, keycloak, matchingCondition)).pipe(mergeMap$1(() => keycloak.authenticated ? addAuthorizationHeader(req, next, keycloak, matchingCondition) : next(req)));\n};\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo All Rights Reserved.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * Injection token for configuring the `includeBearerTokenInterceptor`, allowing the specification\n * of conditions under which the Bearer token should be included in HTTP request headers.\n *\n * This configuration supports multiple conditions, enabling customization for different URLs.\n * It also provides options to tailor the Bearer prefix and the Authorization header name as needed.\n */\nconst INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG = new InjectionToken('Include the bearer token when explicitly defined int the URL pattern condition');\nconst findMatchingCondition = ({\n  method,\n  url\n}, {\n  urlPattern,\n  httpMethods = []\n}) => {\n  const httpMethodTest = httpMethods.length === 0 || httpMethods.join().indexOf(method.toUpperCase()) > -1;\n  const urlTest = urlPattern.test(url);\n  return httpMethodTest && urlTest;\n};\n/**\n * HTTP Interceptor to include a Bearer token in the Authorization header for specific HTTP requests.\n *\n * This interceptor ensures that a Bearer token is added to outgoing HTTP requests based on explicitly\n * defined conditions. By default, the interceptor does not include the Bearer token unless the request\n * matches the provided configuration (`IncludeBearerTokenCondition`). This approach enhances security\n * by preventing sensitive tokens from being unintentionally sent to unauthorized services.\n *\n * ### Features:\n * 1. **Explicit URL Matching**: The interceptor uses regular expressions to match URLs where the Bearer token should be included.\n * 2. **HTTP Method Filtering**: Optional filtering by HTTP methods (e.g., `GET`, `POST`, `PUT`) to refine the conditions for adding the token.\n * 3. **Token Management**: Ensures the Keycloak token is valid by optionally refreshing it before attaching it to the request.\n * 4. **Controlled Authorization**: Sends the token only for requests where the user is authenticated, and the conditions match.\n *\n * ### Workflow:\n * - Reads conditions from `INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG`, which specifies when the Bearer token should be included.\n * - If a request matches the conditions:\n *   1. The Keycloak token is refreshed if needed.\n *   2. The Bearer token is added to the Authorization header.\n *   3. The modified request is passed to the next handler.\n * - If no conditions match, the request proceeds unchanged.\n *\n * ### Security:\n * By explicitly defining URL patterns and optional HTTP methods, this interceptor prevents the leakage of tokens\n * to unintended endpoints, such as third-party APIs or external services. This is especially critical for applications\n * that interact with both internal and external services.\n *\n * @param req - The `HttpRequest` object representing the outgoing HTTP request.\n * @param next - The `HttpHandlerFn` for passing the request to the next handler in the chain.\n * @returns An `Observable<HttpEvent<unknown>>` representing the asynchronous HTTP response.\n *\n * ### Configuration:\n * The interceptor relies on `INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG`, an injection token that holds\n * an array of `IncludeBearerTokenCondition` objects. Each object defines the conditions for including\n * the Bearer token in the request.\n *\n * #### Example Configuration:\n * ```typescript\n * provideHttpClient(\n *   withInterceptors([includeBearerTokenInterceptor]),\n *   {\n *     provide: INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG,\n *     useValue: [\n *       {\n *         urlPattern: /^https:\\/\\/api\\.internal\\.myapp\\.com\\/.*\\/,\n *         httpMethods: ['GET', 'POST'], // Add the token only for GET and POST methods\n *       },\n *     ],\n *   }\n * );\n * ```\n *\n * ### Example Usage:\n * ```typescript\n * export const appConfig: ApplicationConfig = {\n *   providers: [\n *     provideHttpClient(withInterceptors([includeBearerTokenInterceptor])),\n *     provideZoneChangeDetection({ eventCoalescing: true }),\n *     provideRouter(routes),\n *   ],\n * };\n * ```\n *\n * ### Example Matching Condition:\n * ```typescript\n * {\n *   urlPattern: /^(https:\\/\\/internal\\.mycompany\\.com)(\\/.*)?$/i,\n *   httpMethods: ['GET', 'PUT'], // Optional: Match only specific HTTP methods\n * }\n * ```\n */\nconst includeBearerTokenInterceptor = (req, next) => {\n  const conditions = inject(INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG) ?? [];\n  const matchingCondition = conditions.find(condition => findMatchingCondition(req, condition));\n  if (!matchingCondition) {\n    return next(req);\n  }\n  const keycloak = inject(Keycloak);\n  return from(conditionallyUpdateToken(req, keycloak, matchingCondition)).pipe(mergeMap$1(() => keycloak.authenticated ? addAuthorizationHeader(req, next, keycloak, matchingCondition) : next(req)));\n};\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo All Rights Reserved.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n/**\n * Provides Keycloak initialization logic for the app initializer phase.\n * Ensures Keycloak is initialized and features are configured.\n *\n * @param keycloak - The Keycloak instance.\n * @param options - ProvideKeycloakOptions for configuration.\n * @returns EnvironmentProviders or an empty array if `initOptions` is not provided.\n */\nconst provideKeycloakInAppInitializer = (keycloak, options) => {\n  const {\n    initOptions,\n    features = []\n  } = options;\n  if (!initOptions) {\n    return [];\n  }\n  return provideAppInitializer(async () => {\n    const injector = inject(EnvironmentInjector);\n    runInInjectionContext(injector, () => features.forEach(feature => feature.configure()));\n    await keycloak.init(initOptions).catch(error => console.error('Keycloak initialization failed', error));\n  });\n};\n/**\n * Configures and provides Keycloak as a dependency in an Angular application.\n *\n * This function initializes a Keycloak instance with the provided configuration and\n * optional initialization options. It integrates Keycloak into Angular dependency\n * injection system, allowing easy consumption throughout the application. Additionally,\n * it supports custom providers and Keycloak Angular features.\n *\n * If `initOptions` is not provided, the Keycloak instance will not be automatically initialized.\n * In such cases, the application must call `keycloak.init()` explicitly.\n *\n * @param options - Configuration object for Keycloak:\n *   - `config`: The Keycloak configuration, including the server URL, realm, and client ID.\n *   - `initOptions` (Optional): Initialization options for the Keycloak instance.\n *   - `providers` (Optional): Additional Angular providers to include.\n *   - `features` (Optional): Keycloak Angular features to configure during initialization.\n *\n * @returns An `EnvironmentProviders` object integrating Keycloak setup and additional providers.\n *\n * @example\n * ```ts\n * import { provideKeycloak } from './keycloak.providers';\n * import { bootstrapApplication } from '@angular/platform-browser';\n * import { AppComponent } from './app/app.component';\n *\n * bootstrapApplication(AppComponent, {\n *   providers: [\n *     provideKeycloak({\n *       config: {\n *         url: 'https://auth-server.example.com',\n *         realm: 'my-realm',\n *         clientId: 'my-client',\n *       },\n *       initOptions: {\n *         onLoad: 'login-required',\n *       },\n *     }),\n *   ],\n * });\n * ```\n */\nfunction provideKeycloak(options) {\n  const keycloak = new Keycloak(options.config);\n  const providers = options.providers ?? [];\n  const keycloakSignal = createKeycloakSignal(keycloak);\n  return makeEnvironmentProviders([{\n    provide: KEYCLOAK_EVENT_SIGNAL,\n    useValue: keycloakSignal\n  }, {\n    provide: Keycloak,\n    useValue: keycloak\n  }, ...providers, provideKeycloakInAppInitializer(keycloak, options)]);\n}\n\n/**\n * @license\n * Copyright Mauricio Gemelli Vigolo All Rights Reserved.\n *\n * Use of this source code is governed by a MIT-style license that can be\n * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/blob/main/LICENSE.md\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutoRefreshTokenService, CUSTOM_BEARER_TOKEN_INTERCEPTOR_CONFIG, CoreModule, HasRolesDirective, INCLUDE_BEARER_TOKEN_INTERCEPTOR_CONFIG, KEYCLOAK_EVENT_SIGNAL, KeycloakAngularModule, KeycloakAuthGuard, KeycloakBearerInterceptor, KeycloakEventType, KeycloakEventTypeLegacy, KeycloakService, UserActivityService, addAuthorizationHeader, conditionallyUpdateToken, createAuthGuard, createInterceptorCondition, createKeycloakSignal, customBearerTokenInterceptor, includeBearerTokenInterceptor, provideKeycloak, typeEventArgs, withAutoRefreshToken };\n"],
  "mappings": "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",
  "names": ["KeycloakEventTypeLegacy", "realmRoles", "KeycloakEventType"]
}

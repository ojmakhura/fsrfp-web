// Generated by andromda-angular cartridge (service\service.impl.ts.vsl) CAN EDIT
import { Injectable, inject } from '@angular/core';
import { Observable } from 'rxjs';
import { DocumentDTO } from '@app/model/bw/co/roguesystems/fsrfp/document/document-dto';
import { HttpClient } from '@angular/common/http';
import { Page } from '@app/model/page.model';
import { SearchObject } from '@app/model/search-object';
import { EntityType } from '@app/model/bw/co/roguesystems/fsrfp/entity-type';

@Injectable({
  providedIn: 'root',
})
export class DocumentApi {
  protected path = '/document';

  private http = inject(HttpClient);

  public findByDocumentType(documentTypeId: string | any): Observable<DocumentDTO[] | any[]> {
    return this.http.get<DocumentDTO[] | any[]>(`${this.path}/documentTypeId/${documentTypeId}`);
  }

  public findById(id: string | any): Observable<DocumentDTO | any> {
    return this.http.get<DocumentDTO | any>(`${this.path}/${id}`);
  }

  public findByTarget(target: EntityType | any, targetId: string | any): Observable<DocumentDTO[] | any[]> {
    return this.http.get<DocumentDTO[] | any[]>(`${this.path}/target/${target}/${targetId}`);
  }

  public getAll(): Observable<DocumentDTO[] | any[]> {
    return this.http.get<DocumentDTO[] | any[]>(`${this.path}`);
  }

  public getAllPaged(pageNumber: number | any, pageSize: number | any): Observable<Page<DocumentDTO> | any> {
    return this.http.get<Page<DocumentDTO> | any>(`${this.path}/paged?pageNumber=${pageNumber}&pageSize=${pageSize}`);
  }

  public remove(id: string | any): Observable<boolean | any> {
    return this.http.delete<boolean | any>(`${this.path}/${id}`);
  }

  public save(document: DocumentDTO | any): Observable<DocumentDTO | any> {
    return this.http.post<DocumentDTO | any>(`${this.path}`, document);
  }

  public search(criteria: string | any): Observable<DocumentDTO[] | any[]> {
    return this.http.get<DocumentDTO[] | any[]>(`${this.path}/search?criteria=${criteria}`);
  }

  public updateFile(id: string | any, file: File | any): Observable<DocumentDTO | any> {
    const formData: FormData = new FormData();
    formData.append('file', file);

    return this.http.put<DocumentDTO | any>(`${this.path}/update/${id}`, formData);
  }

  public upload(
    target: EntityType | any,
    targetId: string | any,
    documentTypeId: string | any,
    file: File | any,
  ): Observable<DocumentDTO | any> {
    const formData: FormData = new FormData();
    formData.append('file', file);

    console.log('Uploading document:', { target, targetId, documentTypeId });
    return this.http.post<DocumentDTO | any>(
      `${this.path}/upload/${target}/${targetId}/type/${documentTypeId}`,
      formData,
    );
  }

  downloadFile(id: string): Observable<Blob> {
    return this.http.get(`${this.path}/download/${id}`, { responseType: 'blob' });
  }
}

// license-header angular merge-point
//
/**
 * @author Generated by app-routing.module.ts.vsl in andromda-anglar-cartridge Do not modify by hand!
 *
 * MODEL CLASS:  $validationName
 */
import { Routes } from '@angular/router';
import { Shell } from '@app/shell/shell.service';
import { AuthenticationGuard } from './auth';
// import { LoginComponent } from './auth/login.component';

export const routes: Routes = [
  // Authentication routes (outside of shell)
  // {
  //   path: 'login',
  //   loadComponent: () => import('./auth/login.component').then(c => c.LoginComponent),
  //   data: { title: 'Login' }
  // },

  // Main application routes (within shell)
  Shell.childRoutes([
    // Home route
    {
      path: '',
      redirectTo: 'home',
      pathMatch: 'full',
    },
    {
      path: 'home',
      data: { title: 'Home' },
      loadChildren: () => import('./home/home.routes').then((m) => m.routes),
    },

    // Public routes
    {
      path: 'about',
      data: { title: 'About' },
      loadChildren: () => import('./about/about.routes').then((m) => m.routes),
    },

    // Protected application routes - Main entities
    {
      path: 'regulators',
      data: { title: 'Regulators', breadcrumb: 'Regulators' },
      canActivate: [AuthenticationGuard],
      loadChildren: () => import('./view/regulator/regulator.routes').then((m) => m.routes),
    },
    {
      path: 'regulated-operations',
      data: { title: 'Regulated Operations', breadcrumb: 'Regulated Operations' },
      canActivate: [AuthenticationGuard],
      loadChildren: () => import('./view/regulated-operation/regulated-operation.routes').then((m) => m.routes),
    },
    {
      path: 'regulated-operation-processes',
      data: { title: 'Regulated Operation Processes', breadcrumb: 'Regulated Operation Processes' },
      canActivate: [AuthenticationGuard],
      loadChildren: () =>
        import('./view/regulated-operation/process/regulated-operation-process.routes').then((m) => m.routes),
    },
    {
      path: 'processes',
      data: { title: 'Processes', breadcrumb: 'Processes' },
      canActivate: [AuthenticationGuard],
      loadChildren: () => import('./view/process/process.routes').then((m) => m.routes),
    },
    {
      path: 'documents',
      data: { title: 'Documents', breadcrumb: 'Documents' },
      canActivate: [AuthenticationGuard],
      loadChildren: () => import('./view/document/document.routes').then((m) => m.routes),
    },

    // Admin/Configuration routes
    {
      path: 'admin',
      data: { title: 'Administration', breadcrumb: 'Admin' },
      canActivate: [AuthenticationGuard],
      children: [
        {
          path: '',
          redirectTo: 'document-types',
          pathMatch: 'full',
        },
        {
          path: 'document-types',
          data: { title: 'Document Types', breadcrumb: 'Document Types' },
          loadChildren: () => import('./view/document/type/document-type.routes').then((m) => m.routes),
        },
      ],
    },

    // Legacy route redirects for backward compatibility
    {
      path: 'regulator',
      redirectTo: 'regulators',
      pathMatch: 'prefix',
    },
    {
      path: 'process',
      redirectTo: 'processes',
      pathMatch: 'prefix',
    },
    {
      path: 'document',
      redirectTo: 'documents',
      pathMatch: 'prefix',
    },
  ]),

  // Fallback when no prior route is matched
  {
    path: '**',
    redirectTo: 'home',
    pathMatch: 'full',
  },
];
